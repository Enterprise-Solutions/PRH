<?php echo $this->doctype(); ?>

<html lang="es">
    <head>
        <meta charset="utf-8">
        <title>PRH - Personas</title>

		<style type="text/css">
		
		#margen{
				margin: 0px;
				margin-top: 110px;
		}
        </style>
        
		<script type="text/javascript">

			var baseURL = '<?=$this->basePath()?>';

			var auxcarrera = null;
			var titulo = null;
	
			var itemsPorPagina = 10;
			var page = 0;
			
			var id = 0;
			var name_doc = 'doc'+id;
			var doc_nro = 'nro'+id;
			var doc_tipo = 'tipo'+id;
			var doc_origen = 'origen'+id;

			var id2 = 0;
			var name_ubic = 'ubic'+id2;
			var dir = 'dir'+id2;
			var lug = 'lug'+id2;

			var id3 = 0;
			var name_cont = 'cont'+id3;
			var cont_tipo = 'cont_tipo'+id3;
			var cont_valor = 'cont_valor'+id3;
			
Ext.onReady(function(){
				delete Ext.tip.Tip.prototype.minWidth;

					Ext.define('Pais', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'int',
								name: 'dirPaisId'
							},
							{
								type: 'string',
								name: 'nombre'
							}
						]
					});

					Ext.define('nacionalidad', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'int',
								name: 'dir_pais_id'
							},{
								type: 'string',
								name: 'nombre'
							},{
								type: 'string',
								name: 'nacionalidad'
							},{
								type: 'string',
								name: 'abrev'
							},{
								type: 'string',
								name: 'codigo'
							}
						]
					});
					
					Ext.define('TipoDoc', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'string',
								name: 'orgDocumentoTipoCodigo'
							},
							{
								type: 'string',
								name: 'nombre'
							}
						]
					});
					
					Ext.define('profesion', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'int',
								name: 'org_profesion_id'
							},
							{
								type: 'string',
								name: 'nombre'
							}
							,
							{
								type: 'string',
								name: 'abrev'
							}
						]
					});

					Ext.define('religion', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'int',
								name: 'org_religion_id'
							},
							{
								type: 'string',
								name: 'nombre'
							}
						]
					});

					Ext.define('lugar', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'int',
								name: 'dir_barrio_id'
							},
							{
								type: 'string',
								name: 'barrio'
							},{
								type: 'string',
								name: 'search'
							},{
								type: 'string',
								name: 'ciudad'
							},{
								type: 'string',
								name: 'dpto'
							},{
								type: 'string',
								name: 'pais'
							}
						]
					});

					Ext.define('estadoCivil', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'int',
								name: 'org_estado_civil_id'
							},
							{
								type: 'string',
								name: 'nombre'
							}
						]
					});

					Ext.define('contactoTipo', {
						extend: 'Ext.data.Model',
						fields: [
							{
								type: 'string',
								name: 'org_contacto_tipo_codigo',
							},
							{
								type: 'string',
								name: 'nombre'
							}
							,
							{
								type: 'string',
								name: 'descripcion'
							}
						]
					});
							
					
						var comboLugarStore = Ext.create('Ext.data.Store', {
							model: 'lugar',
							pageSize: itemsPorPagina, 
							proxy: {
								type: 'ajax',
								headers: {'Accept':'application/json'},
								url: baseURL + '/org/combos/dir-barrio?format=json',
								reader: {
									type: 'json',
									root: 'records',
									totalProperty: 'numResults'
								}
							},
							autoLoad: true
						});
						
						var comboProfesionStore = Ext.create('Ext.data.Store', {
							model: 'profesion',
							pageSize: itemsPorPagina, 
							proxy: {
								type: 'ajax',
								  extraParams:{
								    	"p[limit]": itemsPorPagina,
										"p[page]": page, 
								  },
								headers: {'Accept':'application/json'},
								url: baseURL + '/org/profesion/index?format=json',
								reader: {
									type: 'json',
									root: 'records',
									totalProperty: 'numResults'
								}
							},
							autoLoad: true
						});
						
						var comboReligionStore = Ext.create('Ext.data.Store', {
							model: 'religion',
							pageSize: itemsPorPagina, 
							proxy: {
								type: 'ajax',
								  extraParams:{
								    	"p[limit]": itemsPorPagina,
										"p[page]": page, 
								  },
								headers: {'Accept':'application/json'},
								url: baseURL + '/org/religion/index?format=json',
								reader: {
									type: 'json',
									root: 'records',
									totalProperty: 'numResults'
								}
							},
							autoLoad: true
						});	
						
						var tipoDocumentoStore = Ext.create('Ext.data.Store', {
							model: 'TipoDoc',
							proxy: {
								type: 'ajax',
								extraParams: {'p[limit]':'all'},
								headers: {'Accept':'application/json'},
								url: baseURL + '/login/per-doc-tipo?format=json',
								reader: {
									type: 'json',
									root: 'records'
								}
							},
							autoLoad: true
						});

						var paisStore = Ext.create('Ext.data.Store', {
							model: 'Pais',
							proxy: {
								type: 'ajax',
								extraParams: {'p[limit]':'all'},
								headers: {'Accept':'application/json'},
								url: baseURL + '/login/dir-pais?format=json',
								reader: {
									type: 'json',
									root: 'records'
								}
							},
							autoLoad: true
						});

						var nacionalidadStore = Ext.create('Ext.data.Store', {
							model: 'nacionalidad',
							proxy: {
								type: 'ajax',
								extraParams: {'p[limit]':'all'},
								headers: {'Accept':'application/json'},
								url: baseURL + '/org/combos/dir-pais?format=json',
								reader: {
									type: 'json',
									root: 'records'
								}
							},
							autoLoad: true
						});

						var estadoCivilStore = Ext.create('Ext.data.Store', {
							model: 'estadoCivil',
							pageSize: itemsPorPagina, 
							proxy: {
								type: 'ajax',
								  extraParams:{
								    	"p[limit]": itemsPorPagina,
										"p[page]": page, 
								  },
								headers: {'Accept':'application/json'},
								url: baseURL + '/org/estado-civil/index?format=json',
								reader: {
									type: 'json',
									root: 'records',
									totalProperty: 'numResults'
								}
							},
							autoLoad: true
						});

						var contactoTipoStore = Ext.create('Ext.data.Store', {
							model: 'contactoTipo',
							proxy: {
								type: 'ajax',
								extraParams: {'p[limit]':'all'},
								headers: {'Accept':'application/json'},
								url: baseURL + '/org/combos/org-contacto-tipo?format=json',
								reader: {
									type: 'json',
									root: 'records'
								}
							},
							autoLoad: true
						});
						
					
					var buttonCrear = function(b,e)
					{
									var basicForm = b.up('form').getForm();  
						if(basicForm.isValid())
						{
															
						            var valoresForm = basicForm.getFieldValues();
  
						           	var auxnombre = valoresForm.nombre;
						           	var auxapellido = valoresForm.apellido;
						           	var auxfechanacimiento = valoresForm.fecha_de_nacimiento;
						           	var auxgenero = valoresForm.genero;

						        	var agregarDoc = [];
						        	
						           	var i = 0;
						           	for(i=0; i<=id; i++)
						           	{	
						           		aux_doc_nro = 'nro'+i;
						    			aux_doc_tipo = 'tipo'+i;
						    			aux_doc_origen = 'origen'+i;
							           		var elemento = {"org_documento_tipo_codigo": valoresForm[aux_doc_tipo], "preferencia": i, 
								           			   "dir_pais_id": valoresForm[aux_doc_origen], "valor": valoresForm[aux_doc_nro]};
							           		agregarDoc.push(elemento);
						           	} 
						           	
						           	console.log(agregarDoc);

									var agregarUbic = [];
						        	
						           	var j = 0;
						           	for(j=0; j<=id2; j++)
						           	{	
						           		aux_dir = 'dir'+j;
						    			aux_lug = 'lug'+j;
						    			
							           		var elemento2 = {"direccion": valoresForm[aux_dir], "dir_barrio_id": valoresForm[aux_lug]};
							           		agregarUbic.push(elemento2);
						           	} 
						           	
						           //	console.log(agregarUbic);

									var agregarCont = [];
						        	
						           	var k = 0;
						           	for(k=0; k<=id3; k++)
						           	{	
						           		aux_cont_tipo = 'cont_tipo'+k;
						    			aux_cont_valor = 'cont_valor'+k;
						    			
							           		var elemento3 = {"org_contacto_tipo_codigo": valoresForm[aux_cont_tipo], "contacto":valoresForm[aux_cont_valor]};
							           		agregarCont.push(elemento3);
						           	} 
						           	
						           //	console.log(agregarCont);
						           	
						        	var auxnacionalidad = valoresForm.nacionalidad;
						        	var auxreligion = valoresForm.religion;
						        	var auxestado_civil = valoresForm.estado_civil;
  							  

									Ext.Ajax.request({
										   url: baseURL + '/org/personas/crear',
										   success: function(response, opt){
											   Ext.Msg.show({
												    title:'Aviso',
													msg:'Persona Cargada Correctamente'
											   });
											   function hide_message() {
											       Ext.defer(function() {
											           Ext.MessageBox.hide();
											       }, delay);
											   }
											   hide_message();
											   window.location = baseURL+'/org/personas/index-ui';
										   },
										   jsonData:{
										       'post':{
												   'org_parte_id':null,
												   'nombre': auxnombre,
												   'apellido': auxapellido,
												   'genero': auxgenero,
												   'fechaDeNacimiento': (formatearFecha(auxfechanacimiento, 1)),
												   'dir_pais_id': auxnacionalidad,
												   'org_religion_id': auxreligion,
												   'org_estado_civil_id': auxestado_civil,	
							 					   'Documentos':{'agregados':agregarDoc},
						 						   'Direcciones':{'agregados':agregarUbic},
						 						   'Contactos':{'agregados':agregarCont}									   
										       }
										   }
									 });
						}
						else
						{
							Ext.Msg.alert('Aviso','Hay campos inv&aacute;lidos');
							return;
						}  	
						
					};

		var crearDoc = function ()
		{
			id++;
			name_doc = 'doc'+id;
			doc_nro = 'nro'+id;
			doc_tipo = 'tipo'+id;
			doc_origen = 'origen'+id;
			
			return new Ext.create('Ext.container.Container', {
				xtype: 'container',
				id: name_doc,
			    title: 'Datos de Documentaci&oacute;n',
			    collapsible: true,
			    height: 'fit',
			    width: 'fit',
			    border: 1,
			    flex: 1,
			    layout: 'column',
				defaultType: 'textfield',
			    padding: '5 0 0 0',
			    defaultType: 'textfield',
				 items: [{
			    	    	fieldLabel: 'Nro. de Doc',
			    	    	labelWidth: 90,
			    	        allowBlank: false,
			    	        padding: '5 15 5 15',
			    	        width: 300,
			    	        anchor:'90%',
			    	        name: doc_nro,
		    	 		},{
					        fieldLabel: 'Tipo de Doc',
					        xtype: 'combobox',
					        width: 350,
					        labelWidth: 95,
					        padding: '5 15 5 15',
					        store: tipoDocumentoStore,
					        queryMode: 'local',
					        displayField: 'nombre',
					        valueField: 'orgDocumentoTipoCodigo',
					        allowBlank: false,
					        anchor:'90%',
					        name: doc_tipo,
					    },{
					        fieldLabel: 'Origen de Doc',
					        xtype: 'combobox',
					        labelWidth: 110,
					        width: 350,
					        store: paisStore,
					        displayField: 'nombre',
					        valueField: 'dirPaisId',
					        queryMode: 'local',
					        allowBlank: false,
					        padding: '5 15 5 15',
				 	        anchor:'90%',
				 	        name: doc_origen,
			    	 	}]
			});
		};

			var crearUbic = function ()
			{
				id2++;
				name_ubic = 'ubic'+id2;
				dir = 'dir'+id2;
				lug = 'lug'+id2;

				var comboLugarStore2 = Ext.create('Ext.data.Store', {
					model: 'lugar',
					pageSize: itemsPorPagina, 
					proxy: {
						type: 'ajax',
						headers: {'Accept':'application/json'},
						url: baseURL + '/org/combos/dir-barrio?format=json',
						reader: {
							type: 'json',
							root: 'records',
							totalProperty: 'numResults'
						}
					},
					autoLoad: true
				});
				
				return new Ext.create('Ext.container.Container', {
					xtype: 'container',
					id: name_ubic,
				    title: 'Datos de Documentaci&oacute;n',
				    collapsible: true,
				    height: 'fit',
				    width: 'fit',
				    border: 1,
				    flex: 1,
				    layout: 'column',
					defaultType: 'textfield',
				    padding: '10 0 0 0',
				    defaultType: 'textfield',
					 items: [{
					        fieldLabel: 'Direcci&oacute;n',
					        width: 650,
					        padding: '5 15 5 15',
					        anchor:'90%',
					    	name: dir,
					    },{
					        fieldLabel: 'Lugar',
					        xtype: 'combobox',
					        valueField: 'dir_barrio_id',
					        displayField: 'search',
					        labelWidth: 80,
					        width: 400,
					        store: comboLugarStore2,
					        queryMode: 'remote',
					        typeAhead: true,
					        emptyText: 'Escriba el nombre de su Pais, Ciudad o Barrio...',
					        loadingText: 'Buscando Lugares...',
					        hideTrigger: true,
					        queryParam: 's[barrio]:',
					        minChars: 1,
					        padding: '5 15 5 15',
				 	        anchor:'90%',
				 	       	name: lug,
					    }]
					});

			};

			var crearCont = function ()
			{
				id3++;
				name_cont = 'cont'+id3;
				cont_tipo = 'cont_tipo'+id3;
				cont_valor = 'cont_valor'+id3;

				var contactoTipoStore2 = Ext.create('Ext.data.Store', {
					model: 'contactoTipo',
					proxy: {
						type: 'ajax',
						extraParams: {'p[limit]':'all'},
						headers: {'Accept':'application/json'},
						url: baseURL + '/org/combos/org-contacto-tipo?format=json',
						reader: {
							type: 'json',
							root: 'records'
						}
					},
					autoLoad: true
				});
				
				return new Ext.create('Ext.container.Container', {
					xtype: 'container',
				    title: 'Datos de Documentaci&oacute;n',
				    collapsible: true,
				    height: 'fit',
				    width: 'fit',
				    id: name_cont,
				    border: 1,
				    flex: 1,
				    layout: 'column',
					defaultType: 'textfield',
				    padding: '10 0 0 0',
				    defaultType: 'textfield',
					 items: [{
							fieldLabel: 'Tipo de Contacto',
					        xtype: 'combobox',
					        labelWidth: 130,
					        width: 400,
					        store: contactoTipoStore2,
					        queryMode: 'local',
					        displayField: 'nombre',
					        valueField: 'org_contacto_tipo_codigo',
					        emptyText: 'Escriba el Tipo de Contacto...',
					        loadingText: 'Buscando...',
					        allowBlank: true,
					        padding: '5 15 5 15',
				 	        anchor:'90%',
				 	        name: cont_tipo,
						},{
						    fieldLabel: 'Contacto',
						    width: 400,
						    labelWidth: 110,
						    anchor:'90%',
						    padding: '5 15 5 15',
							name: cont_valor,
						}
					 	]
					});

			};
								
				var panelPersona = Ext.create('Ext.form.Panel', {
					//padding: 10,
					items:[{
					    xtype: 'panel',
					    id: 'panelDoc',
					    title: 'Datos de Documentaci&oacute;n',
					    collapsible: true,
					    height: 'fit',
					    width: 'fit',
					    border: 1,
					    layout: 'column',
					    flex: 1,
					    padding: 10,
					    defaultType: 'textfield',
						 items: [{
					    	    	fieldLabel: 'Nro. de Doc',
					    	    	labelWidth: 90,
					    	        allowBlank: false,
					    	        padding: '10 15 5 15',
					    	        width: 300,
					    	        anchor:'90%',
					    	        name: doc_nro,
				    	 		},{
							        fieldLabel: 'Tipo de Doc',
							        xtype: 'combobox',
							        width: 350,
							        labelWidth: 95,
							        padding: '10 15 5 15',
							        store: tipoDocumentoStore,
							        queryMode: 'local',
							        displayField: 'nombre',
							        valueField: 'orgDocumentoTipoCodigo',
							        allowBlank: false,
							        anchor:'90%',
							        name: doc_tipo,
							    },{
							        fieldLabel: 'Origen de Doc',
							        xtype: 'combobox',
							        labelWidth: 110,
							        width: 350,
							        store: paisStore,
							        displayField: 'nombre',
							        valueField: 'dirPaisId',
							        queryMode: 'local',
							        allowBlank: false,
							        padding: '10 15 5 15',
						 	        anchor:'90%',
						 	        name: doc_origen,
					    	 	},{	  
						 	    	  xtype: 'button',
						 	    	  margin: '7 0 5 20',
						 	    	  scale: 'medium',
						 	    	  style:'background-color: white; border:none',
						 	    	  icon: baseURL+'/img/icons/grid/add3.png',
									  handler:function() {
										   var doc = crearDoc();
										   Ext.getCmp('panelDoc').add(doc);
										   if (id > '0'){
											   Ext.getCmp('buttonDelete').setDisabled(false);	
										   }
									  }
								 },{	  
						 	    	  xtype: 'button',
						 	    	  id: 'buttonDelete',
						 	    	  margin: '7 0 5 0',
						 	    	  disabled: true,
						 	    	  scale: 'medium',
						 	    	  style:'background-color: white; border:none',
						 	    	  icon: baseURL+'/img/icons/grid/delete3.png',
						 	    	  handler:function() {
		 								   Ext.getCmp('panelDoc').remove(name_doc);
		 								   id--;
		 								   name_doc = 'doc'+id;
		 								   if (id == '0'){
											   Ext.getCmp('buttonDelete').setDisabled(true);	
										   }
		 							  }
						 	     }
					    	    ]},{
					    xtype: 'panel',
					    title: 'Datos Personales',
					    collapsible: true,
					    //anchor:'90%',
					    height: 'fit',
					    width: 'fit',
					    border: 1,
					//    flex: 1,
					    padding: '0 10 10 10',
					    layout: 'hbox',
					    defaultType: 'textfield',
					    items: [{
							xtype: 'container',
							flex: 1,
							layout: 'anchor',
							defaultType: 'textfield',
							items: [    
							    {
								        fieldLabel: 'Nombres',
								        allowBlank: false,
								        padding: 15,
								        labelWidth: 110,
								        anchor:'90%',
								        name: 'nombre'
							    },{
							        	fieldLabel: 'Fecha de Nac:',
							        	labelWidth: 110,
							 	        xtype: 'datefield',
							 	       	format: 'd/m/Y',
							 	        allowBlank: false,
							 	        padding: 15,
							 	        anchor:'90%',
							 	        name: 'fecha_de_nacimiento'
						         },{
								        fieldLabel: 'Estado Civil',
								        xtype: 'combobox',
								        labelWidth: 110,
								        padding: 15,
								        store: estadoCivilStore,
								        queryMode: 'local',
								        displayField: 'nombre',
								        valueField: 'org_estado_civil_id',
								        allowBlank: false,
								        anchor:'90%',
								        name: 'estado_civil',
								  },{
								        fieldLabel: 'Religi&oacute;n',
								        xtype: 'combobox',
								        labelWidth: 110,
								        store: comboReligionStore,
								        queryMode: 'local',
								        displayField: 'nombre',
								        valueField: 'org_religion_id',
								        allowBlank: true,
								        padding: 15,
							 	        anchor:'90%',
							 	        name: 'religion',
								    },{
								    	fieldLabel: 'Nro. de hijos',
								    	labelWidth: 110,
								    	xtype: 'numberfield',
								    	minValue: 0,
								    	value: 0,
								    	anchor:'90%',
								    	padding: 15,
								    	name: 'hijos',
						    	 	}
					    	]},{
					    		xtype: 'container',
				                flex: 1,
				                layout: 'anchor',
				                defaultType: 'textfield',
				                items: [{
					    	        fieldLabel: 'Apellidos',
					    	        labelWidth: 110,
					    	        allowBlank: false,
					    	        padding: 15,
							        anchor:'90%',
							        name: 'apellido'
					    	    },{
							        fieldLabel: 'Nacionalidad',
							        xtype: 'combobox',
							        labelWidth: 110,
							        store: nacionalidadStore,
							        queryMode: 'local',
							        displayField: 'nacionalidad',
							        valueField: 'dir_pais_id',
							        allowBlank: false,
							        padding: 15,
						 	        anchor:'90%',
						 	       	minChars: 1,
						 	        name: 'nacionalidad', 
					    	    },{
						        	 xtype: 'fieldcontainer',
						        	 padding: 15,
						             fieldLabel: 'Sexo',
						             labelWidth: 110,
						             defaultType: 'radiofield',
						             defaults: {
						                 flex: 0.5
						             },
						             layout: 'hbox',
						             items: [
						                 {
						                     boxLabel  : 'Masculino',
						                     name      : 'genero',
						                     inputValue: 'M',
						                     id        : 'radio1'
						                 }, {
						                     boxLabel  : 'Femenino',
						                     name      : 'genero',
						                     inputValue: 'F',
						                     id        : 'radio2'
						                 }
						             ]
						         },{
								    	fieldLabel: 'Profesi&oacute;n',
								    	xtype: 'combobox',
								        displayField: 'nombre',
								        valueField: 'org_profesion_id',
								        labelWidth: 110,
								        store: comboProfesionStore,
								        typeAhead: true,
								        emptyText: 'Escriba el nombre de la Profesion...',
								        loadingText: 'Buscando Profesiones...',
								        hideTrigger: true,
								        queryMode: 'local',
								        padding: 15,
							 	        anchor:'90%',
								        allowBlank: true,
								        name: 'profesion',	  
						    	    }
					    		]
					    	}]},{
					    xtype: 'panel',
					    id: 'panelUbic',
					    title: 'Datos de Ubicaci&oacute;n',
					    collapsible: true,
					    height: 'fit',
					    width: 'fit',
					    border: 1,
					    layout: 'column',
					    flex: 1,
					    padding: '0 10 10 10',
					    defaultType: 'textfield',
						 items: [{
						        fieldLabel: 'Direcci&oacute;n',
						        allowBlank: true,
						        width: 650,
						        padding: '10 15 5 15',
						        anchor:'90%',
						    	name: dir,
						    },{
						        fieldLabel: 'Lugar',
						        xtype: 'combobox',
						        valueField: 'dir_barrio_id',
						        displayField: 'search',
						        labelWidth: 80,
						        width: 400,
						        store: comboLugarStore,
						        queryMode: 'remote',
						        typeAhead: true,
						        emptyText: 'Escriba el nombre de su Pais, Ciudad o Barrio...',
						        loadingText: 'Buscando Lugares...',
						        hideTrigger: true,
						        //allowBlank: true,
						        queryParam: 's[barrio]:',
						        minChars: 1,
						        padding: '10 15 5 15',
					 	        anchor:'90%',
					 	       	name: lug,
						    },{	  
					 	    	  xtype: 'button',
					 	    	  margin: '7 0 5 20',
					 	    	  scale: 'medium',
					 	    	  style:'background-color: white; border:none',
					 	    	  icon: baseURL+'/img/icons/grid/add3.png',
								  handler:function() {
									   var ubic = crearUbic();
									   Ext.getCmp('panelUbic').add(ubic);
									   if (id2 > '0'){
										   Ext.getCmp('buttonDelete2').setDisabled(false);	
									   }
								  }
							 },{	  
					 	    	  xtype: 'button',
					 	    	  id: 'buttonDelete2',
					 	    	  margin: '7 0 5 0',
					 	    	  disabled: true,
					 	    	  scale: 'medium',
					 	    	  style:'background-color: white; border:none',
					 	    	  icon: baseURL+'/img/icons/grid/delete3.png',
					 	    	  handler:function() {
	 								   Ext.getCmp('panelUbic').remove(name_ubic);
	 								   id2--;
	 								   name_ubic = 'ubic'+id2;
	 								   if (id2 == '0'){
										   Ext.getCmp('buttonDelete2').setDisabled(true);	
									   }
	 							  }
					 	     }
					    	    ]},{
				    	xtype: 'panel',
					    title: 'Datos de Contacto',
					    id: 'panelCont',
					    collapsible: true,
					    height: 'fit',
					    width: 'fit',
					    border: 1,
				         layout: 'column',
				         padding: '0 10 10 10',
				         defaultType: 'textfield',
				         items: [ 
									{
										fieldLabel: 'Tipo de Contacto',
								        xtype: 'combobox',
								        labelWidth: 130,
								        width: 400,
								        store: contactoTipoStore,
								        queryMode: 'local',
								        displayField: 'nombre',
								        valueField: 'org_contacto_tipo_codigo',
								        emptyText: 'Escriba el Tipo de Contacto...',
								        loadingText: 'Buscando...',
								        allowBlank: true,
								        padding: '10 15 5 15',
							 	        anchor:'90%',
							 	        name: cont_tipo,
									},{
									    fieldLabel: 'Contacto',
									    width: 400,
									    labelWidth: 110,
									    anchor:'90%',
									    padding: '10 15 5 15',
										name: cont_valor,
									},{	  
							 	    	  xtype: 'button',
							 	    	  margin: '7 0 5 20',
							 	    	  scale: 'medium',
							 	    	  style:'background-color: white; border:none',
							 	    	  icon: baseURL+'/img/icons/grid/add3.png',
										  handler:function() {
											   var cont = crearCont();
											   Ext.getCmp('panelCont').add(cont);
											   if (id3 > '0'){
												   Ext.getCmp('buttonDelete3').setDisabled(false);	
											   }
										  }
									 },{	  
							 	    	  xtype: 'button',
							 	    	  id: 'buttonDelete3',
							 	    	  margin: '7 0 5 0',
							 	    	  disabled: true,
							 	    	  scale: 'medium',
							 	    	  style:'background-color: white; border:none',
							 	    	  icon: baseURL+'/img/icons/grid/delete3.png',
							 	    	  handler:function() {
			 								   Ext.getCmp('panelCont').remove(name_cont);
			 								   id3--;
			 								   name_cont = 'cont'+id3;
			 								   if (id3 == '0'){
												   Ext.getCmp('buttonDelete3').setDisabled(true);	
											   }
			 							  }
							 	     }
						         ]
				     },{
				    	xtype: 'container',
				 	    height: 200,
				 	    width: 'fit',
				 	   layout: 'hbox',
				 	   // flex: 1,
				 	   // padding: '5 0 10 440',
				 	    items:[
				 	      {	  
				 	    	  xtype: 'button',
				 	    	  margin: '15 0 10 1050',
						      scale: 'large',
						      text: 'Guardar',
							  //disabled: true,
							  handler: buttonCrear
				 	      },{
				 	    	  xtype: 'button',
				 	    	  margin: '15 0 10 20',
						      scale: 'large',
						      text: 'Cancelar',
							  //disabled: true,
							  handler: function() {
								  window.location = baseURL+'/org/personas/index-ui';
							}
				 	      }
					    ]
				     }]
					});
														
				var pantalla = Ext.create('Ext.form.Panel', {
					 //id: 'margen',
					    width: 'fit',
					    height: 'fit',
					    renderTo: document.body,		           
					    items:[{
											xtype: 'container',
											//layout: 'fit',  
								            items: [panelPersona]  					
								}
						],
						listeners:{
							'render':function(){
								Ext.getCmp('topTabPanel').setActiveTab(0);
//								Ext.getCmp('personaTabPanel').setActiveTab(0);
							}
						}	    	
				});

				Ext.getCmp('centerPanel').add(pantalla);
																			
});

			
		</script>
    </head>
    <body>
    </body>
</html>